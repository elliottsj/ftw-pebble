#include <pebble.h>
#include "stop_window.h"

static TextLayer *route_title_layer;
static TextLayer *direction_title_layer;
static TextLayer *stop_title_layer;
static TextLayer *stop_prediction_layer;
static TextLayer *minutes_text_layer;
static char *prediction_text;

/*
 * Set the text in the stop window
 */
static void stop_window_set_text(char *route_title, char *direction_title, char *stop_title, char *prediction, char *minutes_label) {
    text_layer_set_text(route_title_layer, route_title);
    text_layer_set_text(direction_title_layer, direction_title);
    text_layer_set_text(stop_title_layer, stop_title);
    text_layer_set_text(stop_prediction_layer, prediction);
    text_layer_set_text(minutes_text_layer, minutes_label);
}

/*
 * Upon receiving prediction data, set the text fields appropriately
 */
static void on_prediction_loaded(char *prediction, char *minutes_label) {
    current_stop->prediction = prediction;
    current_stop->minutes_label = minutes_label;
    text_layer_set_text(stop_prediction_layer, current_stop->prediction);
    text_layer_set_text(minutes_text_layer, current_stop->minutes_label);
}

/*
 * Called when the window is first pushed to the screen when it's not already loaded.
 * Do the layout of the window.
 */
static void stop_window_load(Window *window) {
    Layer *window_layer = window_get_root_layer(window);
    GRect bounds = layer_get_bounds(window_layer);

    // Set background color to black
    window_set_background_color(stop_window, GColorBlack);

    // Create route_title
    route_title_layer = text_layer_create((GRect) {
        .origin = { 0, 0 },
        .size = { bounds.size.w, 28 }
    });
    text_layer_set_font(route_title_layer, fonts_get_system_font(FONT_KEY_GOTHIC_28_BOLD));
    text_layer_set_text_alignment(route_title_layer, GTextAlignmentCenter);
    text_layer_set_overflow_mode(route_title_layer, GTextOverflowModeTrailingEllipsis);
    text_layer_set_text_color(route_title_layer, GColorWhite);
    text_layer_set_background_color(route_title_layer, GColorClear);
    layer_add_child(window_layer, text_layer_get_layer(route_title_layer));

    // Create direction_title
    direction_title_layer = text_layer_create((GRect) {
        .origin = { 0, 28 },
        .size = { bounds.size.w, 40 }
    });
    text_layer_set_font(direction_title_layer, fonts_get_system_font(FONT_KEY_GOTHIC_14_BOLD));
    text_layer_set_text_alignment(direction_title_layer, GTextAlignmentCenter);
    text_layer_set_overflow_mode(direction_title_layer, GTextOverflowModeTrailingEllipsis);
    text_layer_set_text_color(direction_title_layer, GColorWhite);
    text_layer_set_background_color(direction_title_layer, GColorClear);
    layer_add_child(window_layer, text_layer_get_layer(direction_title_layer));

    // Create stop_title
    stop_title_layer = text_layer_create((GRect) {
        .origin = { 0, 60 },
        .size = { bounds.size.w, 40 }
    });
    text_layer_set_font(stop_title_layer, fonts_get_system_font(FONT_KEY_GOTHIC_14));
    text_layer_set_text_alignment(stop_title_layer, GTextAlignmentCenter);
    text_layer_set_overflow_mode(stop_title_layer, GTextOverflowModeTrailingEllipsis);
    text_layer_set_text_color(stop_title_layer, GColorWhite);
    text_layer_set_background_color(stop_title_layer, GColorClear);
    layer_add_child(window_layer, text_layer_get_layer(stop_title_layer));

    // Create stop_eta
    stop_prediction_layer = text_layer_create((GRect) {
        .origin = { 0, 95 },
        .size = { bounds.size.w, bounds.size.h }
    });
    text_layer_set_font(stop_prediction_layer, fonts_get_system_font(FONT_KEY_GOTHIC_28_BOLD));
    text_layer_set_text_alignment(stop_prediction_layer, GTextAlignmentCenter);
    text_layer_set_overflow_mode(stop_prediction_layer, GTextOverflowModeTrailingEllipsis);
    text_layer_set_text_color(stop_prediction_layer, GColorBlack);
    text_layer_set_background_color(stop_prediction_layer, GColorWhite);
    layer_add_child(window_layer, text_layer_get_layer(stop_prediction_layer));

    // Create "minutes" text with small font
    minutes_text_layer = text_layer_create((GRect) {
        .origin = { 0, 125 },
        .size = { bounds.size.w, bounds.size.h }
    });
    text_layer_set_font(minutes_text_layer, fonts_get_system_font(FONT_KEY_GOTHIC_18_BOLD));
    text_layer_set_text_alignment(minutes_text_layer, GTextAlignmentCenter);
    text_layer_set_overflow_mode(minutes_text_layer, GTextOverflowModeTrailingEllipsis);
    text_layer_set_text_color(minutes_text_layer, GColorBlack);
    text_layer_set_background_color(minutes_text_layer, GColorClear);
    layer_add_child(window_layer, text_layer_get_layer(minutes_text_layer));
}

/*
 * Called when the window resumes after already being loaded.
 */
static void stop_window_appear(Window *window) {
    // Request prediction data from phone
    sync_get_prediction(current_stop->route_tag, current_section->stop_tag, on_prediction_loaded);

    // Set text with placeholder for prediction
    stop_window_set_text(current_stop->route_title,
                         current_stop->direction_title,
                         current_section->stop_title,
                         "Loading...", 
                         "");
}

/*
 * Called when the window leaves the screen.
 */
static void stop_window_disappear(Window *window) {

}

/*
 * Called when the window is removed from the window stack.
 * Destroy any layers associated with the window.
 */
static void stop_window_unload(Window *window) {
    text_layer_destroy(route_title_layer);
    text_layer_destroy(direction_title_layer);
    text_layer_destroy(stop_title_layer);
    text_layer_destroy(stop_prediction_layer);
    text_layer_destroy(minutes_text_layer);
    free(prediction_text);
}

/*
 * Create the stop window and set handlers
 */
static void init_stop_window() {
    stop_window = window_create();
    window_set_window_handlers(stop_window, (WindowHandlers) {
        .load = stop_window_load,
        .appear = stop_window_appear,
        .disappear = stop_window_disappear,
        .unload = stop_window_unload,
    });
}
